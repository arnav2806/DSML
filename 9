import math

# Define points
points = {
    'P1': [0.1, 0.6],
    'P2': [0.15, 0.71],
    'P3': [0.08, 0.9],
    'P4': [0.16, 0.85],
    'P5': [0.2, 0.3],
    'P6': [0.25, 0.5],
    'P7': [0.24, 0.1],
    'P8': [0.3, 0.2]
}

# Initial centroids
centroids = {'C1': [0.1, 0.6], 'C2': [0.3, 0.2]}

# Function to calculate Euclidean distance
def euclidean_distance(p1, p2):
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

# Function to assign points to the nearest centroid
def assign_clusters(points, centroids):
    clusters = {'C1': [], 'C2': []}
    for point_name, point in points.items():
        dist_to_C1 = euclidean_distance(point, centroids['C1'])
        dist_to_C2 = euclidean_distance(point, centroids['C2'])
        
        if dist_to_C1 < dist_to_C2:
            clusters['C1'].append(point_name)
        else:
            clusters['C2'].append(point_name)
    
    return clusters

# Function to update centroids by calculating the mean of assigned points
def update_centroids(clusters, points):
    new_centroids = {}
    for cluster, assigned_points in clusters.items():
        x_sum = 0
        y_sum = 0
        for point_name in assigned_points:
            x_sum += points[point_name][0]
            y_sum += points[point_name][1]
        
        new_centroids[cluster] = [x_sum / len(assigned_points), y_sum / len(assigned_points)]
    
    return new_centroids

# Perform K-Means clustering for 1 iteration
clusters = assign_clusters(points, centroids)
new_centroids = update_centroids(clusters, points)

# Output the results
print("Clusters after 1 iteration:", clusters)
print("Updated Centroids:", new_centroids)

# Answer questions:
# 1) Which cluster does P6 belong to?
p6_cluster = 'C1' if euclidean_distance(points['P6'], new_centroids['C1']) < euclidean_distance(points['P6'], new_centroids['C2']) else 'C2'
print(f"P6 belongs to cluster: {p6_cluster}")

# 2) What is the population of a cluster around m2 (C2)?
cluster_c2_population = len(clusters['C2'])
print(f"Population around C2 (m2): {cluster_c2_population}")

# 3) What are the updated centroids?
print(f"Updated m1: {new_centroids['C1']}")
print(f"Updated m2: {new_centroids['C2']}")
